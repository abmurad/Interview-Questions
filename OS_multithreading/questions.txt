► How does system call works?
Sol:
 At a higher level, a system call is the way a user level program asks the 
operating system to do something for it. If you're writing a program, and 
you need to read from a file, you use a system call to ask the operating 
system to read the file for you.
First, the user program sets up the arguments for the system call. One of 
the arguments is the system call number (more on that later). Note that 
all this is done automatically by library functions unless you are writing 
in assembly. After the arguments are all set up, the program executes the 
"system call" instruction. This instruction causes an exception: an event 
that causes the processor to jump to a new address and start executing the 
code there.

The instructions at the new address save your user program's state, figure 
out what system call you want, call the function in the kernel that 
implements that system call, restores your user program state, and returns 
control back to the user program. A system call is one way that the 
functions defined in a device driver end up being called.

===============================================================================
► What is a race condition? How do you detect them? How do you handle 
them? And finally, how do you prevent them from occurring?
Sol: A race condition occurs when two or more threads can access shared 
data and they try to change it at the same time. Because the thread scheduling 
algorithm can swap between threads at any time, you don't know the order in 
which the threads will attempt to access the shared data. Therefore, the 
result of the change in data is dependent on the thread scheduling algorithm, 
i.e. both threads are "racing" to access/change the data.

===============================================================================


