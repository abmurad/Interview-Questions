===============================================================================
► What is difference between constructor and distructor?
Sol:
    1. Constructor is used to initialize the instance of a class 
whereas a destructor destroys the objects when they are no longer 
in use.
    2. Contructor allocates the meomry, wheras destroctor 
release the memory.
    3. Overloading of constroctor is possible whereas destroctor 
cannot be overloaded.
    4. Constroctor has same name of the class where as Destructor 
also has the same name of the class but with the ~ (tiled operation) 

===============================================================================
► How do you differentiate between aggregation and association?
Sol:
    Have to find 

===============================================================================
► What are the factors deciding the size of a class in C++?
Sol:
    There are many factors that decide the size of an object 
of a class in C++. These factors are:

1. Size of all non-static data members
2. Order of data members
3. Byte alignment or byte padding
4. Size of its immediate base class
5. The existence of virtual function(s) (Dynamic polymorphism 
   using virtual functions).
6. Compiler being used
7. Mode of inheritance (virtual inheritance)

http://www.cprogramming.com/tutorial/size_of_class_object.html

===============================================================================
► How can you call a C function from a C++ code?
Sol:
     In order to call a C function from C++ code, you would 
use the “extern “C”” keyword when declaring the function in C. 
Then, you would call the function just like you would call any 
other function. An example will help clarify this:

/*this is what the C++ code would look like
   for the declaration of the foo function, which 
   is defined somewhere else in C code: */

extern "C" void foo( ); 

If you have more than one C functions that you would like to 
call from your C++ code, then it would be best to group them and 
declare them like this:

/* this is inside the C++ code,
     if we want to access multiple C functions
     from C++ then we can declare them like this:
*/
extern "C" {    
    int foo( );
    double foobar();
};  

===============================================================================
► What are the benefits of using exceptions in C++?
Sol:
    Possibly an obvious point - a developer can ignore (or not 
be aware of) your return status and go on blissfully unaware 
that something failed.

An exception needs to be acknowledged in some way - it can't be 
silently ignored without actively putting something in place to 
do so.

===============================================================================
► What is a convserion constructor in c++?
Sol:
    conversion_constructor.cpp

===============================================================================
► What is copy constructor?
Sol:
    http://www.codeproject.com/Tips/78946/C-Copy-Constructor-in-depth
    copy_constructor.cpp
===============================================================================
►  What is pure virtual function?
           or
   Why a class have pure virtual function?
Sol:
1. To ensure that this function is overridden in derived classes 
that are to be instantiated
2. To allow for templated classes to be used with friend functions
3. To maximize the memory efficiency provided that execution 
speed is not at a premium
4. To maximize code reuse
5. To maximize the execution speed of the function provided that 
memory is not at a premium

===============================================================================
► What is the difference between overloading and overriding?
Sol:
    In overloading a new functionality is added to the current 
configuration of the function, let be operator in this case (say ‘+’)
.There is already a functionality that adds two integers or two 
floats etc. But there is no provision of adding two objects. this 
provision can be added using operator overloading.

in case of overriding you change the whole function. for ex. you 
have a base class with a function eat(). In the derived class you 
define another function with the same name eat(). thus the behavious 
of base class’ eat() is overridden by the derived class’eat(). the 
old functionality never comes into picture. the new functionality 
never complements the old eat(). 
